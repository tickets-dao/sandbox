#!/bin/bash

. default

package_install() {
    src="$1"
	hash="$(sha256sum "$src" | cut -c 1-64)"
	chaincode_no_ext="${src%.tar.gz}"
	chaincode="${chaincode_no_ext##*/}"
	channel_dir="${src%/*}"
	channel="${channel_dir##*/}"
	namespace_dir="${channel_dir%/*}"
	namespace="${namespace_dir##*/}"
	configtx="$channel_dir/configtx.yaml"
	version="$(cat "$src.version")"
	policy="$(cat "$src.policy")"
	sequence_file="$src.sequence"
	sequence="$(cat "$sequence_file" || echo "1")"
	id="${chaincode}_${version}:${hash}"
	dst_dir="$CHANNEL_STATE/$namespace/$channel"
	dst="$dst_dir/$chaincode.tar.gz.install"

	_equal "$src" "$dst" && return

	    err="0"
            for peer in $(_configtx_peer_fqdn "$configtx")
            do
                org="$(_org_by_hostname "$peer")"
                export CORE_PEER_LOCALMSPID="$org"
                export CORE_PEER_ID="$peer"
                export CORE_PEER_MSPCONFIGPATH="$(_crypto_admin_msp_by_org "$org")"
                export CORE_PEER_TLS_ROOTCERT_FILE="$(_crypto_admin_ca_by_org "$org")"
                export CORE_PEER_ADDRESS="$peer:$PEER_PORT"
                export CORE_PEER_TLS_ENABLED="true"

                _info "install '$chaincode' to '$peer' from '$src'"
                peer chaincode install "$src"
            done

            export CORE_PEER_LOCALMSPID="$(_org_by_configtx "$configtx" 1)"
            export CORE_PEER_ID="$(_configtx_peer_fqdn "$configtx" "1")"
            export CORE_PEER_ADDRESS="$(_configtx_peer_fqdn "$configtx" "1"):$PEER_PORT"
            export CORE_PEER_MSPCONFIGPATH="$(_crypto_msp_by_org $CORE_PEER_LOCALMSPID Admin)"
            export CORE_PEER_TLS_ROOTCERT_FILE="$(_crypto_user_ca_by_org $CORE_PEER_LOCALMSPID Admin)"
            export CORE_PEER_TLS_ENABLED="true"
            export INIT="$(cat "$src.init")"

            if echo "$INIT" | grep -qE '\{.*\}'
            then
		_info "instantiate chaincode '$chaincode', version '$version'"
		peer chaincode instantiate --name "$chaincode" \
	            --channelID "$channel" \
		    --version "$version" \
		    --policy "$policy" \
		    --ctor "$INIT" \
		    --clientauth --tls \
		    --certfile "$(_crypto_user_cert_by_org $CORE_PEER_LOCALMSPID Admin)" \
		    --keyfile "$(_crypto_user_key_by_org $CORE_PEER_LOCALMSPID Admin)" \
		    --cafile "$(_crypto_user_ca_by_org $CORE_PEER_LOCALMSPID Admin)"
            fi
	    
	    if ! peer chaincode list --instantiated -C "$channel" | grep -q "$version"
	    then
		_info "upgrade chaincode '$chaincode' to version '$version'"
                peer chaincode upgrade --name "$chaincode" \
			--version "$version" \
			--channelID "$channel" \
			--ctor "$INIT" \
			--policy "$policy" \
			--clientauth --tls \
			--cafile "$(_crypto_user_ca_by_org $CORE_PEER_LOCALMSPID Admin)" \
			--certfile "$(_crypto_user_cert_by_org $CORE_PEER_LOCALMSPID Admin)" \
			--keyfile "$(_crypto_user_key_by_org $CORE_PEER_LOCALMSPID Admin)"
            fi

        echo "$((sequence + 1))" > "$sequence_file"
	_copy "$src" "$dst" 
}

for package in $(find "$CHANNEL_STATE" -type f -name "*.tar.gz" | sort -u)
do
	package_install "$package"
done
