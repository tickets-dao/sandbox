version: '3.4'

###############################################################################
x-check: &default-healthcheck
  healthcheck:
    test: [ "CMD", "/data/.prepare" ]
    interval: 5s
    timeout: 4s
  deploy:
    resources:
      limits:
        memory: 512M
      reservations:
        memory: 16M

###############################################################################
volumes:
  docker:
  tool:
  prometheus:
  grafana:
  postgres:
  redis:
  mongo:
  test-orderer-001.org0:
  test-orderer-002.org0:
  test-orderer-011.org0:
  test-orderer-012.org0:
  test-peer-001.org0:
  test-peer-002.org0:
  test-orderer-001.org1:
  test-orderer-002.org1:
  test-orderer-011.org1:
  test-orderer-012.org1:
  test-peer-001.org1:
  test-peer-002.org1:
  test-peer-001.org2:
  test-peer-002.org2:
  test-robot-001.org0:
  test-observer-hlfparser-001.org0:
  test-observer-apiservice-001.org0:
  test-observer-l0-gate:
  test-observer-l1-hlf:
  test-observer-l2-foundation:
  test-observer-l3-balance:
  hlf-proxy-public:
  hlf-proxy-private:

###############################################################################
services:
  dind:
    image: "${IMG_DIND}"
    restart: always
    privileged: true
    volumes:
      - ${ORIGIN}/dind/data:/data:rw
      - ${ORIGIN}/dind/etc/docker/daemon.json:/etc/docker/daemon.json
      - docker:/run
    healthcheck:
      test: [ "CMD", "/data/.prepare" ]
      interval: 5s
      timeout: 4s
    deploy:
      resources:
        limits:
          memory: 4096M
        reservations:
          memory: 128M

###############################################################################
  prometheus:
    image: "${IMG_PROMETHEUS}"
    restart: unless-stopped
    user: root
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=7d'
      - '--web.enable-lifecycle'
    ports:
      - "${IP}:${EXP_PROMETHEUS}"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - prometheus:/prometheus
      - ${ORIGIN}/prometheus/data:/data
      - ${ORIGIN}/prometheus/etc/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    <<: *default-healthcheck

###############################################################################
  grafana:
    image: "${IMG_GRAFANA}"
    restart: unless-stopped
    user: root
    depends_on:
      - prometheus
    ports:
        - "${IP}:${EXP_GRAFANA}"
    volumes:
      - ${ORIGIN}/grafana/data:/data
      - ${ORIGIN}/grafana/etc/grafana/grafana.ini:/etc/grafana/grafana.ini:ro
      - grafana:/var/lib/grafana
    <<: *default-healthcheck

###############################################################################
  redis:
    image: "${IMG_REDIS}"
    restart: unless-stopped
    environment:
      - REDIS_REPLICATION_MODE=master
    command: ["redis-server", "--requirepass", "test", "--save", ""]
    ports:
        - "${IP}:${EXP_REDIS}"
    volumes:
      - redis:/data:rw

###############################################################################
  postgres:
    image: "${IMG_POSTGRES}"
    restart: unless-stopped
    environment:
      - POSTGRES_DB=test
      - POSTGRES_USER=test
      - POSTGRES_PASSWORD=test
    command: ["postgres", "-c", "log_statement=all", "-c", "log_destination=stderr"]
    ports:
      - "${IP}:${EXP_POSTGRES}"
    volumes:
      - ${ORIGIN}/postgres/data:/data:rw
      - postgres:/var/lib/postgresql/data:rw
    <<: *default-healthcheck

###############################################################################
  mongo:
    image: "${IMG_MONGO}"
    restart: unless-stopped
    environment:
      - MONGODB_ROOT_USER=test
      - MONGODB_ROOT_PASSWORD=test
      - MONGODB_REPLICA_SET_MODE=primary
      - MONGODB_REPLICA_SET_NAME=rs0
      - MONGODB_REPLICA_SET_KEY=changeme
    ports:
      - "${IP}:${EXP_MONGO}"
    volumes:
      - ${ORIGIN}/mongo/data:/data:ro
      - mongo:/bitnami/mongodb:rw
    <<: *default-healthcheck

  mongo-exporter:
    image: "${IMG_MONGO_EXPORTER}"
    restart: unless-stopped
    depends_on:
      - mongo
    ports:
      - "${IP}:${EXP_MONGO_EXPORTER}"
    command: ["--mongodb.uri=mongodb://test:test@mongo:27017", "--collect-all"]
    volumes:
      - ${ORIGIN}/mongo-exporter/data:/data:ro
    <<: *default-healthcheck

###############################################################################
  mailhog:
    image: "${IMG_MAILHOG}"
    restart: unless-stopped
    ports:
      - "${IP}:${EXP_MAILHOG}"
    # volumes:
    #   - ./mailhog/data:/data

###############################################################################
  tool:
    image: "${IMG_TOOL}"
    tty: true
    stdin_open: true
    depends_on:
      - dind
    environment:
      - IP
      - SLEEP_STATE
      - SLEEP_ERROR
      - SMARTBFT
      - HOSTPWD=$PWD
      - HOST=$HOST
      - CUSTOMPWD=$CUSTOMPWD
      - FABRIC_LOGGING_SPEC=${TOOL_LOG_LEVEL}
      - GOPATH=/opt/gopath
      - CORE_VM_ENDPOINT=unix://docker/docker.sock
      - PATH=/data/bin:/go/bin:/usr/local/go/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
    working_dir: /data
    entrypoint: entrypoint
    volumes:
      - tool:/state
      - .env:/state/.env
      - ${ORIGIN_DATA}/tool/data:/data
      - ${ORIGIN}/tool/data/bin:/data/bin:ro
      - docker:/docker
      - grafana:/state/grafana
      - prometheus:/state/prometheus
      - redis:/state/redis
      - postgres:/state/postgres
      - test-orderer-001.org0:/state/test-orderer-001.org0
      - test-orderer-002.org0:/state/test-orderer-002.org0
      - test-orderer-011.org0:/state/test-orderer-011.org0
      - test-orderer-012.org0:/state/test-orderer-012.org0
      - test-peer-001.org0:/state/test-peer-001.org0
      - test-peer-002.org0:/state/test-peer-002.org0
      - test-orderer-001.org1:/state/test-orderer-001.org1
      - test-orderer-002.org1:/state/test-orderer-002.org1
      - test-orderer-011.org1:/state/test-orderer-011.org1
      - test-orderer-012.org1:/state/test-orderer-012.org1
      - test-peer-001.org1:/state/test-peer-001.org1
      - test-peer-002.org1:/state/test-peer-002.org1
      - test-peer-001.org2:/state/test-peer-001.org2
      - test-peer-002.org2:/state/test-peer-002.org2
      - test-robot-001.org0:/state/test-robot-001.org0
      - test-observer-hlfparser-001.org0:/state/test-observer-hlfparser-001.org0
      - test-observer-apiservice-001.org0:/state/test-observer-apiservice-001.org0
      - test-observer-l0-gate:/state/test-observer-l0-gate
      - test-observer-l1-hlf:/state/test-observer-l1-hlf
      - test-observer-l2-foundation:/state/test-observer-l2-foundation
      - test-observer-l3-balance:/state/test-observer-l3-balance

###############################################################################
  test-orderer-001.org0:
    image: "${IMG_ORDERER}"
    restart: always
    depends_on:
      - tool
    env_file: .env-orderer
    environment:
      - ORDERER_GENERAL_LOCALMSPID=org0
    volumes:
      - ${ORIGIN}/test-orderer-001.org0/data:/data
      - test-orderer-001.org0:/state
    ports:
      - "${IP}:${EXP_ORDERER_001_ORG0}"
    <<: *default-healthcheck

  test-orderer-002.org0:
    image: "${IMG_ORDERER}"
    restart: always
    depends_on:
      - tool
    env_file: .env-orderer
    environment:
      - ORDERER_GENERAL_LOCALMSPID=org0
    volumes:
      - ${ORIGIN}/test-orderer-002.org0/data:/data
      - test-orderer-002.org0:/state
    ports:
      - "${IP}:${EXP_ORDERER_002_ORG0}"
    <<: *default-healthcheck

  test-orderer-011.org0:
    image: "${IMG_ORDERER}"
    restart: always
    depends_on:
      - tool
    env_file: .env-orderer
    environment:
      - ORDERER_GENERAL_LOCALMSPID=org0
    volumes:
      - ${ORIGIN}/test-orderer-011.org0/data:/data
      - test-orderer-011.org0:/state
    ports:
      - "${IP}:${EXP_ORDERER_011_ORG0}"
    <<: *default-healthcheck

  test-orderer-012.org0:
    image: "${IMG_ORDERER}"
    restart: always
    depends_on:
      - tool
    env_file: .env-orderer
    environment:
      - ORDERER_GENERAL_LOCALMSPID=org0
    volumes:
      - ${ORIGIN}/test-orderer-012.org0/data:/data
      - test-orderer-012.org0:/state
    ports:
      - "${IP}:${EXP_ORDERER_012_ORG0}"
    <<: *default-healthcheck

  test-orderer-001.org1:
    image: "${IMG_ORDERER}"
    restart: always
    depends_on:
      - tool
    env_file: .env-orderer
    environment:
      - ORDERER_GENERAL_LOCALMSPID=org1
    volumes:
      - ${ORIGIN}/test-orderer-001.org1/data:/data
      - test-orderer-001.org1:/state
    ports:
      - "${IP}:${EXP_ORDERER_001_ORG1}"
    <<: *default-healthcheck

  test-orderer-002.org1:
    image: "${IMG_ORDERER}"
    restart: always
    depends_on:
      - tool
    env_file: .env-orderer
    environment:
      - ORDERER_GENERAL_LOCALMSPID=org1
    volumes:
      - ${ORIGIN}/test-orderer-002.org1/data:/data
      - test-orderer-002.org1:/state
    ports:
      - "${IP}:${EXP_ORDERER_002_ORG1}"
    <<: *default-healthcheck

  test-orderer-011.org1:
    image: "${IMG_ORDERER}"
    restart: always
    depends_on:
      - tool
    env_file: .env-orderer
    environment:
      - ORDERER_GENERAL_LOCALMSPID=org1
    volumes:
      - ${ORIGIN}/test-orderer-011.org1/data:/data
      - test-orderer-011.org1:/state
    ports:
      - "${IP}:${EXP_ORDERER_011_ORG1}"
    <<: *default-healthcheck

  test-orderer-012.org1:
    image: "${IMG_ORDERER}"
    restart: always
    depends_on:
      - tool
    env_file: .env-orderer
    environment:
      - ORDERER_GENERAL_LOCALMSPID=org1
    volumes:
      - ${ORIGIN}/test-orderer-012.org1/data:/data
      - test-orderer-012.org1:/state
    ports:
      - "${IP}:${EXP_ORDERER_012_ORG1}"
    <<: *default-healthcheck

###############################################################################
  test-peer-001.org0:
    image: "${IMG_PEER}"
    restart: always
    env_file:  .env-peer
    depends_on:
      - dind
      - tool
    environment:
      - CORE_PEER_ID=test-peer-001.org0
      - CORE_PEER_LOCALMSPID=org0
      - CORE_PEER_ADDRESS=test-peer-001.org0:7051
      - CORE_PEER_GOSSIP_BOOTSTRAP=test-peer-001.org0:7051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=test-peer-001.org0:7051
      - CORE_PEER_CHAINCODEADDRESS=test-peer-001.org0:6000
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:6000
    volumes:
      - ${ORIGIN}/test-peer-001.org0/data:/data:rw
      - test-peer-001.org0:/state
      - docker:/docker
    ports:
      - "${IP}:${EXP_PEER_001_ORG0}"
    <<: *default-healthcheck

  test-peer-002.org0:
    image: "${IMG_PEER}"
    restart: always
    env_file:  .env-peer
    depends_on:
      - dind
      - tool
    environment:
      - CORE_PEER_ID=test-peer-002.org0
      - CORE_PEER_LOCALMSPID=org0
      - CORE_PEER_ADDRESS=test-peer-002.org0:7051
      - CORE_PEER_GOSSIP_BOOTSTRAP=test-peer-002.org0:7051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=test-peer-002.org0:7051
      - CORE_PEER_CHAINCODEADDRESS=test-peer-002.org0:6000
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:6000
    volumes:
      - ${ORIGIN}/test-peer-002.org0/data:/data:rw
      - test-peer-002.org0:/state
      - docker:/docker
    ports:
      - "${IP}:${EXP_PEER_002_ORG0}"
    <<: *default-healthcheck

  test-peer-001.org1:
    image: "${IMG_PEER}"
    restart: always
    env_file:  .env-peer
    depends_on:
      - dind
      - tool
    environment:
      - CORE_PEER_ID=test-peer-001.org1
      - CORE_PEER_LOCALMSPID=org1
      - CORE_PEER_ADDRESS=test-peer-001.org1:7051
      - CORE_PEER_GOSSIP_BOOTSTRAP=test-peer-001.org1:7051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=test-peer-001.org1:7051
      - CORE_PEER_CHAINCODEADDRESS=test-peer-001.org1:6000
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:6000
    volumes:
      - ${ORIGIN}/test-peer-001.org1/data:/data:rw
      - test-peer-001.org1:/state
      - docker:/docker
    ports:
      - "${IP}:${EXP_PEER_001_ORG1}"
    <<: *default-healthcheck

  test-peer-002.org1:
    image: "${IMG_PEER}"
    restart: always
    env_file:  .env-peer
    depends_on:
      - dind
      - tool
    environment:
      - CORE_PEER_ID=test-peer-002.org1
      - CORE_PEER_LOCALMSPID=org1
      - CORE_PEER_ADDRESS=test-peer-002.org1:7051
      - CORE_PEER_GOSSIP_BOOTSTRAP=test-peer-002.org1:7051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=test-peer-002.org1:7051
      - CORE_PEER_CHAINCODEADDRESS=test-peer-002.org1:6000
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:6000
    volumes:
      - ${ORIGIN}/test-peer-002.org1/data:/data:rw
      - test-peer-002.org1:/state
      - docker:/docker
    ports:
      - "${IP}:${EXP_PEER_002_ORG1}"
    <<: *default-healthcheck

  test-peer-001.org2:
    image: "${IMG_PEER}"
    restart: always
    env_file:  .env-peer
    depends_on:
      - dind
      - tool
    environment:
      - CORE_PEER_ID=test-peer-001.org2
      - CORE_PEER_LOCALMSPID=org2
      - CORE_PEER_ADDRESS=test-peer-001.org2:7051
      - CORE_PEER_GOSSIP_BOOTSTRAP=test-peer-001.org2:7051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=test-peer-001.org2:7051
      - CORE_PEER_CHAINCODEADDRESS=test-peer-001.org2:6000
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:6000
    volumes:
      - ${ORIGIN}/test-peer-001.org2/data:/data:rw
      - test-peer-001.org2:/state
      - docker:/docker
    ports:
      - "${IP}:${EXP_PEER_001_ORG2}"
    <<: *default-healthcheck

  test-peer-002.org2:
    image: "${IMG_PEER}"
    restart: always
    env_file:  .env-peer
    depends_on:
      - dind
      - tool
    environment:
      - CORE_PEER_ID=test-peer-002.org2
      - CORE_PEER_LOCALMSPID=org2
      - CORE_PEER_ADDRESS=test-peer-002.org2:7051
      - CORE_PEER_GOSSIP_BOOTSTRAP=test-peer-002.org2:7051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=test-peer-002.org2:7051
      - CORE_PEER_CHAINCODEADDRESS=test-peer-002.org2:6000
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:6000
    volumes:
      - ${ORIGIN}/test-peer-002.org2/data:/data:rw
      - test-peer-002.org2:/state
      - docker:/docker
    ports:
      - "${IP}:${EXP_PEER_002_ORG2}"
    <<: *default-healthcheck

###############################################################################
  test-robot-001.org0:
    image: "${IMG_ROBOT}"
    restart: always
    environment:
      - ROBOT_USESMARTBFT=$SMARTBFT
    depends_on:
      - tool
      - redis
      - test-peer-001.org0
      - test-peer-002.org0
      - test-peer-001.org1
      - test-peer-002.org1
      - test-peer-001.org2
      - test-peer-002.org2
      - test-orderer-001.org0
      - test-orderer-002.org0
      - test-orderer-011.org0
      - test-orderer-012.org0
      - test-orderer-001.org1
      - test-orderer-002.org1
      - test-orderer-011.org1
      - test-orderer-012.org1
    user: "root"
    volumes:
      - ${ORIGIN}/test-robot-001.org0/data:/data
      - ${ORIGIN}/test-robot-001.org0/etc/config.yaml:/etc/config.yaml:ro
      - test-robot-001.org0:/state
    ports:
      - "${IP}:${EXP_ROBOT}"
    <<: *default-healthcheck

###############################################################################
  test-observer-hlfparser-001.org0:
    image: "${IMG_OBSERVER_HLFPARSER}"
    restart: always
    env_file: .env-observer-hlfparser
    depends_on:
      - postgres
    volumes:
      - ${ORIGIN}/test-observer-hlfparser-001.org0/data:/data
      - test-observer-hlfparser-001.org0:/state
    ports:
      - "${IP}:${EXP_OBSERVER_HLFPARSER_HEALTH}"
      - "${IP}:${EXP_OBSERVER_HLFPARSER_API}"
      - "${IP}:${EXP_OBSERVER_HLFPARSER_METRIC}"
    <<: *default-healthcheck

  test-observer-apiservice-001.org0:
    image: "${IMG_OBSERVER_APISERVICE}"
    restart: always
    env_file: .env-observer-apiservice
    depends_on:
      - postgres
    volumes:
      - ${ORIGIN}/test-observer-apiservice-001.org0/data:/data
      - test-observer-apiservice-001.org0:/state
    ports:
      - "${IP}:${EXP_OBSERVER_APISERVICE_HEALTH}"
      - "${IP}:${EXP_OBSERVER_APISERVICE_API}"
      - "${IP}:${EXP_OBSERVER_APISERVICE_METRIC}"
    <<: *default-healthcheck

  test-observer-l1-hlf:
    image: "${IMG_OBSERVER_L1_HLF}"
    restart: always
    depends_on:
      - mongo
    environment:
      - L1HLF_CONFIG=/etc/config.yaml
    user: "root"
    volumes:
      - ${ORIGIN}/test-observer-l1-hlf/data:/data:ro
      - ${ORIGIN}/test-observer-l1-hlf/etc/config.yaml:/etc/config.yaml:ro
      - test-observer-l1-hlf:/state:rw
    ports:
      - "${IP}:${EXP_OBSERVER_L1_HLF_API}"
      - "${IP}:${EXP_OBSERVER_L1_HLF_MINER}"
    <<: *default-healthcheck

  test-observer-l2-foundation:
    image: "${IMG_OBSERVER_L2_FOUNDATION}"
    restart: always
    depends_on:
      - mongo
      - test-observer-l1-hlf
    environment:
      - L2F_CONFIG=/etc/config.yaml
    user: "root"
    volumes:
      - ${ORIGIN}/test-observer-l2-foundation/data:/data:ro
      - ${ORIGIN}/test-observer-l2-foundation/etc/config.yaml:/etc/config.yaml:ro
      - test-observer-l2-foundation:/state:rw
    ports:
      - "${IP}:${EXP_OBSERVER_L2_FOUNDATION_API}"
      - "${IP}:${EXP_OBSERVER_L2_FOUNDATION_MINER}"
    <<: *default-healthcheck

  test-observer-l3-balance:
    image: "${IMG_OBSERVER_L3_BALANCE}"
    restart: always
    depends_on:
      - mongo
      - test-observer-l1-hlf
      - test-observer-l2-foundation
    environment:
      - L3B_CONFIG=/etc/config.yaml
    user: "root"
    volumes:
      - ${ORIGIN}/test-observer-l3-balance/data:/data:ro
      - ${ORIGIN}/test-observer-l3-balance/etc/config.yaml:/etc/config.yaml:ro
      - test-observer-l3-balance:/state:rw
    ports:
      - "${IP}:${EXP_OBSERVER_L3_BALANCE_API}"
      - "${IP}:${EXP_OBSERVER_L3_BALANCE_MINER}"
    <<: *default-healthcheck

###############################################################################
  observer-l0-gate:
    image: "${IMG_OBSERVER_GATE}"
    restart: unless-stopped
    user: root
    volumes:
      - tool:/state/test-observer-l0-gate
      - ${ORIGIN}/observer-l0-gate/data:/data
      - ${ORIGIN}/observer-l0-gate/etc/config.yaml:/etc/config.yaml:ro
      - test-observer-l0-gate:/state
    ports:
      - "${IP}:${IMG_OBSERVER_GATE_PUBLIC}"
    <<: *default-healthcheck

###############################################################################
  hlf-proxy-public:
    image: "${IMG_HLF_PROXY}"
    restart: unless-stopped
    environment:
      - HLFPROXY_LOGLEVEL=debug
      - HLFPROXY_AUTHTOKEN=test
      - HLFPROXY_PROFILEPATH=/state/connection/public/org0/User1@org0/connection.yaml
    user: root
    volumes:
      - tool:/state
      - hlf-proxy-public:/state/hlf-proxy
      - ./tool/data:/data
    ports:
      - "${IP}:${EXP_HLF_PROXY_PUBLIC}"
    <<: *default-healthcheck

  hlf-proxy-private:
    image: "${IMG_HLF_PROXY}"
    restart: unless-stopped
    environment:
      - HLFPROXY_LOGLEVEL=debug
      - HLFPROXY_AUTHTOKEN=test
      - HLFPROXY_PROFILEPATH=/state/connection/private/org0/User1@org0/connection.yaml
    user: root
    volumes:
      - tool:/state
      - hlf-proxy-private:/state/hlf-proxy
      - ./tool/data:/data
    ports:
      - "${IP}:${EXP_HLF_PROXY_PRIVATE}"
    <<: *default-healthcheck
