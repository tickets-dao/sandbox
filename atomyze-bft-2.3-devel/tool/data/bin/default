#!/bin/sh

DATA="/data"
STATE="/state"
STATE_HASH="$STATE/.hash"
STATE_FILE="$STATE/.file"
STATE_FILE_TMP="/tmp/.file"
CONNECTION_TMP="/tmp/.connection.yaml"
CHANNEL_DATA="$DATA/channel"
CHANNEL_STATE="$STATE/channel"
CONNECTION_STATE="$STATE/connection"
CONNECTION_DATA="$DATA/out/connection"
OUT="/dev/shm/out"
[ -z "$ORDERER_PORT" ] && ORDERER_PORT="7050"
[ -z "$PEER_PORT" ] && PEER_PORT="7051"
CRYPTOMATERIAL="${STATE}/peerOrganizations ${STATE}/ordererOrganizations"
CHAINCODE_TMP="/tmp/chaincode.tar.gz"
CUSTOM_CHECK_FILE=".custom_check"
ENV="/state/.env"
SLEEP_ERROR="30"
SLEEP_STATE="30"

_err() {
    echo "-- ERROR: $1"
    exit 1
}

_info() {
    echo "-- INFO: $1"
}

_info_and_exit() {
    _info "$1"
    exit
}

_setup_extra_packages() {
    which "openssl" || apk add --no-cache openssl=~1 || _err "failed to install openssl"
}

_equal() {
    [ "$(cat "$1" | md5sum)" = "$(cat "$2" | md5sum)" ]
}

_copy() {
    cp -fv "$1" "$2"
}

_configtx_orderer_fqdn_port() {
    local limit
    [ -z "$2" ] && limit="999" || limit="$2"
    sed -n '/^Orderer:/,/Organizations:/p' "$1" | awk '/- [a-z]+-/ {print $2}' | head -n "$limit"
}

_configtx_orderer_fqdn() {
    local limit
    [ -z "$2" ] && limit="999" || limit="$2"
    _configtx_orderer_fqdn_port "$1" | cut -d ':' -f 1 | head -n "$limit"
}

_configtx_peer_fqdn() {
    local limit
    [ -z "$2" ] && limit="999" || limit="$2"
    grep -E "^# peer " "$1" | cut -d " " -f 3 | head -n "$limit"
}

_org_by_hostname() {
    echo "${1#*.}"
}

_org_by_configtx() {
    local limit
    [ -z "$2" ] && limit="999" || limit="$2"
    grep -E '\sID: '  "$1" | awk '{print $2}' | head -n "$limit"
}

_crypto_basedir_by_hostname() {
    find $CRYPTOMATERIAL -type d -name "$1" 2>/dev/null \
        | head -n 1
}

_crypto_ca_by_hostname() {
    echo "$STATE/$1/tls/ca.crt"
}

_crypto_admin_cert_by_org() {
    find $CRYPTOMATERIAL -type d -name "$1" -print0 2>/dev/null | \
        xargs -0rI X readlink -f "X/users/Admin@$1/tls/client.crt"
}

_crypto_admin_key_by_org() {
    find $CRYPTOMATERIAL -type d -name "$1" -print0 2>/dev/null | \
        xargs -0rI X readlink -f "X/users/Admin@$1/tls/client.key"
}

_crypto_admin_ca_by_org() {
    find $CRYPTOMATERIAL -type d -name "$1" -print0 2>/dev/null | \
        xargs -0rI X readlink -f "X/users/Admin@$1/tls/ca.crt"
}

_crypto_admin_msp_by_org() {
    find $CRYPTOMATERIAL -type d -name "$1" -print0 2>/dev/null | \
        xargs -0rI X readlink -f "X/users/Admin@$1/msp"
}

_crypto_msp_by_org() {
    find $CRYPTOMATERIAL -type d -name "$1" -print0 2>/dev/null | \
        xargs -0rI X readlink -f "X/users/$2@$1/msp"
}

_expose_by_hostname() {
    local search
    search="${1//[.-]/_}"
    search="${search#test_}"
    search="EXP_${search^^}"
    grep -m 1 "^$search" "$ENV" | cut -d "=" -f 2 | cut -d ":" -f 1
}

_tool_ski_by_public_key() {
    local der
    der="$(echo "$1" | openssl ec -pubin -outform DER 2>/dev/null)" || \
        _err "failed transform public to der"
    echo "$der" | \
        dd ibs=26 skip=1 2>/dev/null | \
        openssl dgst -sha256 2>/dev/null | \
        cut -d ' ' -f2
}

_tool_ski_by_private_key() {
    local public_key
    public_key="$(openssl ec -in "$1" -pubout 2>/dev/null )" || \
        _err "failed export public key"
    _tool_ski_by_public_key "$public_key"
}

_robot_state_dirs() {
    find "$STATE" -type d -name "test-robot*" -mindepth 1 -maxdepth 1
}

alias _ski=_tool_ski_by_private_key

_info "$0"
cd "$WORK" || _err "failed to set work directory"
