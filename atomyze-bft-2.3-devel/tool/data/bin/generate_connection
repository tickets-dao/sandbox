#!/bin/bash

. default

[ -z "$VERSION" ] && VERSION="1.0.0"
[ -z "$LOGGING_LEVEL" ] && LOGGING_LEVEL="info"
[ -z "$USER" ] && USER="User1"
[ -z "$EXPOSE" ] && USER="User1"


ORG=""
CERT=""
KEY=""
MSP=""
CA=""
CONFIGTX=""

###############################################################################
header() {
	echo -n "---
# Autogenerated by '$0' script DO NOT EDIT!

name: $NAMESPACE-network
version: $VERSION
client:
  organization: $ORG

  logging:
    level: $LOGGING_LEVEL

  tlsCerts:
    client:
      key:
        path: $KEY
      cert:
        path: $CERT
      cryptoconfig:
        path: $CRYPTOCONFIG

  credentialStore:
    path: $MSP/signcerts
    cryptoStore:
      path: $MSP

channels:
"
}

organizations_section() {
	echo -n "
organizations:"
	for org in $(_org_by_configtx "$CONFIGTX")
	do
	echo -n "
  $org:
    mspid: $org
    cryptoPath: $MSP
    peers:
$(_configtx_peer_fqdn "$CONFIGTX"|fgrep ".$org"|sed 's/^/      - /g')
"
	done
}

orderers_section_internal() {
	echo -n "
orderers:"
	for orderer in $(_configtx_orderer_fqdn "$CONFIGTX")
	do
	echo -n "
  $orderer:
    url: grpcs://$orderer:$ORDERER_PORT
    tlsCACerts:
      path: $CA
"
	done
}

orderers_section_external() {
	echo -n "
orderers:"
	for orderer in $(_configtx_orderer_fqdn "$CONFIGTX")
	do
	echo -n "
  $orderer:
    url: grpcs://localhost:$(_expose_by_hostname "$orderer")
    tlsCACerts:
      path: $CA
"
	done
}

peers_section_internal() {
	echo -n "
peers:"
	for peer in $(_configtx_peer_fqdn "$CONFIGTX")
	do
	echo -n "
  $peer:
    url: grpcs://$peer:$PEER_PORT
      tlsCACerts:
      path: $1/tlsca.$(_org_by_hostname "$peer")-cert.pems
"
	done
}

peers_section_external() {
	echo -n "
peers:"
	for peer in $(_configtx_peer_fqdn "$CONFIGTX")
	do
		echo -n "
  $peer:
    url: grpcs://localhost:$(_expose_by_hostname "$peer")
    tlsCACerts:
      path: $1/tlsca.$(_org_by_hostname "$peer")-cert.pem
"
	done
}

process_state_namespace() {
	src="$1"
	NAMESPACE="${src##*/}"
	CONFIGTX="$src/system/configtx.yaml"
	ORG="$(_org_by_configtx "$CONFIGTX" "1")"
	msp="$(_crypto_msp_by_org "$ORG" "$USER")"
	cryptoconfig="${msp%/*}"
	ext="$HOSTPWD/tool"

	connection_int_dir="$CONNECTION_STATE/$NAMESPACE/$ORG"
	connection_int_ca_dir="$connection_int_dir/ca"
	connection_int_file="$connection_int_dir/connection.yaml"

	connection_ext_dir="$CONNECTION_DATA/$NAMESPACE/$ORG"
	connection_ext_ca_dir="$connection_ext_dir/ca"
	connection_ext_file="$connection_ext_dir/connection.yaml"

	mkdir -p "$connection_int_dir" "$connection_ext_dir"
	mkdir -p "$connection_int_ca_dir" "$connection_ext_ca_dir"
	cp -frv "$cryptoconfig" "$connection_int_dir"
	cp -frv "$cryptoconfig" "$connection_ext_dir"

	for org in $(_org_by_configtx "$CONFIGTX")
	do
		cp -v "$(_crypto_msp_by_org "$org" "$USER")/tlscacerts/tlsca.$org-cert.pem" "$connection_int_ca_dir"
		cp -v "$(_crypto_msp_by_org "$org" "$USER")/tlscacerts/tlsca.$org-cert.pem" "$connection_ext_ca_dir"
	done

	CERT="$connection_int_dir/$USER@$ORG/tls/client.crt"
	KEY="$connection_int_dir/$USER@$ORG/tls/client.key"
	CA="$connection_int_dir/$USER@$ORG/tls/ca.crt"
	MSP="$connection_int_dir/$USER@$ORG/msp"
	CRYPTOCONFIG="$connection_int_dir/$USER@$ORG"

	_info "internal connection for '$connection_int_file'"
	echo -n "$(header)
$(organizations_section)
$(orderers_section_internal)
$(peers_section_internal "$connection_int_ca_dir")
" > "$connection_int_file"

	CERT="$ext$connection_ext_dir/$USER@$ORG/tls/client.crt"
	KEY="$ext$connection_ext_dir/$USER@$ORG/tls/client.key"
	CA="$ext$connection_ext_dir/$USER@$ORG/tls/ca.crt"
	MSP="$ext$connection_ext_dir/$USER@$ORG/msp"
	CRYPTOCONFIG="$ext$connection_ext_dir/$USER@$ORG"

	_info "external connection '$ext$connection_ext_file'"
	echo -n "$(header)
$(organizations_section)
$(orderers_section_external)
$(peers_section_external "$ext$connection_ext_ca_dir")
" > "$connection_ext_file"

	chown -PRc "$(stat -c %u:%g "$DATA/out")" "$DATA/out"
}

###############################################################################
for namespace in $(find "$CHANNEL_STATE" -type d -maxdepth 1 -mindepth 1)
do
	process_state_namespace "$namespace"
done
