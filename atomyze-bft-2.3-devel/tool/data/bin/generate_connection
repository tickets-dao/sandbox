#!/bin/bash

. default

[ -z "$VERSION" ] && VERSION="1.0.0"
[ -z "$LOGGING_LEVEL" ] && LOGGING_LEVEL="info"
[ -z "$USERS" ] && USERS="Admin User1"
[ -z "$SANS" ] && SANS="localhost"
CP="cp -fru"
[ "$CUSTOMPWD" == "auto" ] && EXT="$HOSTPWD/tool" || EXT="$CUSTOMPWD"
CHANGED="no"

# ORG=""
# CERT=""
# KEY=""
# MSP=""
# CA=""
# CONFIGTX=""

###############################################################################
header() {
	echo -n "---
# Autogenerated by '$0' script DO NOT EDIT!

name: $NAMESPACE-network
version: $VERSION
client:
  organization: $ORG

  logging:
    level: $LOGGING_LEVEL

  tlsCerts:
    client:
      key:
        path: $KEY
      cert:
        path: $CERT
      cryptoconfig:
        path: $CRYPTOCONFIG

  credentialStore:
    path: $MSP/signcerts
    cryptoStore:
      path: $MSP

  connection:
    timeout:
      peer:
        endorser: '300'
      orderer: '300'

  peer:
    timeout:
      response: 5s
      connection: 3s
      discovery:
        greylistExpiry: 1s
      registrationResponse: 10s
    orderer:
      timeout:
        connection: 3s
        response: 5s
    global:
      timeout:
        query: 5s
        execute: 5s
        resmgmt: 5s
      cache:
        connectionIdle: 30s
        eventServiceIdle: 2m
        channelConfig: 60s
        channelMembership: 10s
"

	echo -n "
channels:"
	for channel in $(ls -1 "$CHANNEL_STATE/$namespace")
	do
		echo -n "
  $channel:
    peers:
"
		for peer in $(_configtx_peer_fqdn "$CONFIGTX")
		do
			echo -n "      $peer: {}
"
		done
	done
}

organizations_section() {
	local org
	echo -n "
organizations:"
	for org in $(_org_by_configtx "$CONFIGTX")
	do
	echo -n "
  $org:
    mspid: $org
    cryptoPath: $MSP
    peers:
$(_configtx_peer_fqdn "$CONFIGTX"|fgrep ".$org"|sed 's/^/      - /g')
"
	done
}

orderers_section_internal() {
	echo -n "
orderers:"
	for orderer in $(_configtx_orderer_fqdn "$CONFIGTX")
	do
	echo -n "
  $orderer:
    url: grpcs://$orderer:$ORDERER_PORT
    tlsCACerts:
      path: $1/tlsca.$(_org_by_hostname "$orderer")-cert.pem
"
	done
}

orderers_section_external() {
	echo -n "
orderers:"
	for orderer in $(_configtx_orderer_fqdn "$CONFIGTX")
	do
	echo -n "
  $orderer:
    url: grpcs://$SANS:$(_expose_by_hostname "$orderer")
    tlsCACerts:
      path: $1/tlsca.$(_org_by_hostname "$orderer")-cert.pem
"
	done
}


orderers_section_entity_matchers() {
	echo -n "
entityMatchers:
  orderer:"
	for orderer in $(_configtx_orderer_fqdn "$CONFIGTX")
	do
	echo -n "
    - pattern: $orderer
      urlSubstitutionExp: $SANS:$(_expose_by_hostname "$orderer")
      sslTargetOverrideUrlSubstitutionExp: $SANS
      mappedHost: $orderer
"
	done

	echo -n "
  peer:"

	for peer in $(_configtx_peer_fqdn "$CONFIGTX")
	do
	echo -n "
    - pattern: $peer
      urlSubstitutionExp: $SANS:$(_expose_by_hostname "$peer")
      sslTargetOverrideUrlSubstitutionExp: $SANS
      mappedHost: $peer
"
	done
}

peers_section() {
	echo -n "
peers:
  _default:
    grpcOptions:
      keep-alive-time: 65s
"
	for peer in $(_configtx_peer_fqdn "$CONFIGTX")
	do
	echo -n "
  $peer:
    url: grpcs://$peer:$PEER_PORT
    tlsCACerts:
      path: $1/tlsca.$(_org_by_hostname "$peer")-cert.pem
"
	done
}

process_state_namespace() {
	local src="$1"
	local configtx="$2"
	local org="$3"
	local namespace="${src##*/}"
	local msp="$(_crypto_msp_by_org "$org" "$user")"
	local cryptoconfig="${msp%/*}"

	# Internal variables
	connection_int_dir="$CONNECTION_STATE/$namespace/$org"
	connection_int_ca_dir="$connection_int_dir/$user@$org/ca"
	connection_int_file="$connection_int_dir/$user@$org/connection.yaml"

	# External variables
	connection_ext_dir="$CONNECTION_DATA/$namespace/$org"
	connection_ext_ca_dir="$connection_ext_dir/$user@$org/ca"
	connection_ext_file="$connection_ext_dir/$user@$org/connection.yaml"

	# Basic directories and copy crypto
	mkdir -p "$connection_int_dir" "$connection_ext_dir"
	mkdir -p "$connection_int_ca_dir" "$connection_ext_ca_dir"	
	$CP "$cryptoconfig" "$connection_int_dir"
	$CP "$cryptoconfig" "$connection_ext_dir"

	# Basic variables
	CONFIGTX="$configtx"
	NAMESPACE="$namespace"
	ORG="$org"

	# Internal variables before generate
	CERT="$connection_int_dir/$user@$org/tls/client.crt"
	KEY="$connection_int_dir/$user@$org/tls/client.key"
	CA="$connection_int_dir/$user@$org/tls/ca.crt"
	MSP="$connection_int_dir/$user@$org/msp"
	CRYPTOCONFIG="$connection_int_dir/$user@$org"

	_info "internal connection for '$connection_int_file'"
	echo -n "$(header)
$(organizations_section)
$(orderers_section_internal "$connection_int_ca_dir")
$(peers_section "$connection_int_ca_dir")
" > "$CONNECTION_TMP"

	if ! _equal "$CONNECTION_TMP" "$connection_int_file"
	then
		_copy "$CONNECTION_TMP" "$connection_int_file"
		CHANGED="yes"
	fi

	# External variables before generate
	CERT="$EXT$connection_ext_dir/$user@$org/tls/client.crt"
	KEY="$EXT$connection_ext_dir/$user@$org/tls/client.key"
	CA="$EXT$connection_ext_dir/$user@$org/tls/ca.crt"
	MSP="$EXT$connection_ext_dir/$user@$org/msp"
	CRYPTOCONFIG="$EXT$connection_ext_dir/$user@$org"

	_info "external connection '$EXT$connection_ext_file'"
	echo -n "$(header)
$(organizations_section)
$(orderers_section_external "$EXT$connection_ext_ca_dir")
$(orderers_section_entity_matchers)
$(peers_section "$EXT$connection_ext_ca_dir")
" > "$CONNECTION_TMP"

	if ! _equal "$CONNECTION_TMP" "$connection_ext_file"
	then
		_copy "$CONNECTION_TMP" "$connection_ext_file"
		CHANGED="yes"
	fi

	# Copy all organisation ca certs
	for org in $(_org_by_configtx "$configtx")
	do
		$CP "$(_crypto_msp_by_org "$org" "$user")/tlscacerts/tlsca.$org-cert.pem" "$connection_int_ca_dir"
		$CP "$(_crypto_msp_by_org "$org" "$user")/tlscacerts/tlsca.$org-cert.pem" "$connection_ext_ca_dir"
	done

	chown -PRc "$(stat -c %u:%g "$DATA/out")" "$DATA/out"
}

###############################################################################
for namespace in $(find "$CHANNEL_STATE" -type d -maxdepth 1 -mindepth 1)
do
	configtx="$namespace/system/configtx.yaml"
	for org in $(_org_by_configtx "$configtx")
	do
		for user in $USERS
		do
			process_state_namespace "$namespace" "$configtx" "$org" "$user"
		done
	done
done

if [ "$CHANGED" = "yes" ]
then
	_robot_state_dirs | xargs -r -IX $CP "$CONNECTION_STATE" "X"
	_observer_state_dirs | xargs -r -IX $CP "$CONNECTION_STATE" "X"
else
	_info "connection not changed"
fi
