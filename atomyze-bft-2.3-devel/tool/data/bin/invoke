#!/bin/bash

. default

help() {
	echo "
Usage: $0 [namespace<private|public>] [channel] [chaincode] [ctor] <extra args> <org> <user>

Invoke a chaincode in selected namespace.

Example:

$0 public channel1 chaincode1 '{\"Function\":\"Init\", \"Args\":[\"xxx\"]}'
"
	exit 0
}

[ -z "$4" -o "$1" = "-h" -o "$1" = "--help" ] && help

namespace="$1"
channel="$2"
chaincode="$3"
ctor="$4"
extra="$5"
custom_org="$6"
custom_user="$7"

configtx="$CHANNEL_STATE/$namespace/$channel/configtx.yaml"
peer=$(_configtx_peer_fqdn "$configtx" "1")

[ -n "$custom_org" ] && org="$custom_org" || org="$(_org_by_hostname "$peer")"
[ -n "$custom_user" ] && user="$custom_user" || user="Admin"

orderer="$(_configtx_orderer_fqdn "$configtx" "1")"

export CORE_PEER_LOCALMSPID="$org"
export CORE_PEER_MSPCONFIGPATH="$(_crypto_user_msp_by_org "$org" "$user")"
export CORE_PEER_TLS_ROOTCERT_FILE="$(_crypto_user_ca_by_org "$org" "$user")"
export CORE_PEER_TLS_ENABLED="true"

INVOKE="peer chaincode invoke \
--tls \
--cafile '$(_crypto_ca_by_hostname "$orderer")' \
--orderer '$orderer:$ORDERER_PORT' \
--channelID '$channel' \
--name '$chaincode' \
--ctor '${ctor}'"

for peer in $(_configtx_peer_fqdn "$configtx")
do
	INVOKE="$INVOKE --peerAddresses '$peer:$PEER_PORT' \
--tlsRootCertFiles '$(_crypto_ca_by_hostname "$peer")'"
done

env | grep "CORE_PEER"
echo "$INVOKE $extra" | sh -x
